---
import Navbar from "../components/navbar.astro";
import db from "../db.js";

const notices = await db.getNotices();

// Sort notices by date
const sortedNotices = [...notices].sort((a, b) =>
  new Date(b.date).getTime() - new Date(a.date).getTime()
);
---

<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Church Notices</title>
</head>
<body>
    <Navbar />
    <div class="container">
        <h1>Church Notices</h1>
        
        <div class="controls">
            <input type="date" id="dateFilter" class="date-input">
            <button id="resetFilter" class="reset-btn">Reset Filter</button>
        </div>

        <div id="noticesContainer" class="notices-grid">
            {sortedNotices.map(notice => (
                <div class="notice-card" data-date={notice.date}>
          <h3>{notice.title}</h3>
          <div class="notice-date">
            {new Date(notice.date).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </div>
          <p>{notice.content}</p>
        </div>
      ))}
    </div>
  </div>

  <script>
    // Get references to DOM elements
    const dateFilter = document.getElementById('dateFilter') as HTMLInputElement;
    const resetBtn = document.getElementById('resetFilter') as HTMLButtonElement;
    const noticesContainer = document.getElementById('noticesContainer') as HTMLDivElement;
    const noticeCards = document.querySelectorAll('.notice-card');

    // Function to filter notices based on selected date
    function filterNoticesByDate(selectedDate: string) {
      noticeCards.forEach((card) => {
        const noticeDate = card.getAttribute('data-date');
        if (selectedDate === '' || noticeDate === selectedDate) {
          (card as HTMLElement).style.display = 'block'; // Show the notice card
        } else {
          (card as HTMLElement).style.display = 'none'; // Hide the notice card
        }
      });
    }

    // Event listener for date filter change
    dateFilter.addEventListener('change', (e) => {
      const selectedDate = (e.target as HTMLInputElement).value;
      filterNoticesByDate(selectedDate);
    });

    // Event listener for reset button click
    resetBtn.addEventListener('click', () => {
      dateFilter.value = ''; // Clear the date filter input
      filterNoticesByDate(''); // Show all notices
    });
  </script>

    <style>
        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 2rem;
        }

        .controls {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            justify-content: center;
        }

        .date-input {
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .reset-btn {
            padding: 0.5rem 1rem;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .reset-btn:hover {
            background-color: #0056b3;
        }

        .notices-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 2rem;
        }

        .notice-card {
            background-color: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .notice-card h3 {
            margin: 0 0 0.5rem 0;
            color: #333;
        }

        .notice-date {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .notice-card p {
            margin: 0;
            color: #444;
            line-height: 1.5;
        }
    </style>
</body>
</html>
